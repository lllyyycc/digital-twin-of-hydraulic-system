# 数据结构和算法学习

## 一. 绪论

数据结构是一门研究非数值计算的程序设计问题中计算机的操作对象和它们之间的关系的学科；

由于数据必须在计算机进行处理，因此不仅考虑数据本身的数学性质，还必须考虑数据的存储结构；

数据结构：相互之间存在一种或多种特定关系的数据元素的集合；

数据元素的4类基本结构：

1. 集合；2. 线性结构，一个对一个； 3. 树形结构，一个对多个关系； 4. 图状结构或网状结构，多对多；

数据元素之间的逻辑关系，称为逻辑结构，是对数据之间存在关系的抽象描述；逻辑结构在计算机中的表示，称为数据的物理结构或存储结构；

数据存储以字节为单位Byte，数据传输以位bit为单位，一个位代表一个二进制中0或1，每八个位组成一个字节，2^10个字节为1KB，2^20个字节为1MB，2^30个字节为1GB；

数据元素的关系在计算机中有两种不同的表示方法：

1. 顺序映像，对应顺序存储结构，借助元素在存储器中的位置来表示数据之间的逻辑关系，例如用地址相邻的4个字节位串表示一个复数；
2. 非顺序映像，对应链式存储结构，借助指针元素存储地址的指针表示数据之间的逻辑关系；

C语言作为高级语言，不直接以内存地址描述存储结构，因此基于C语言的数据结构也称为虚拟存储结构；

**数据类型**是一个值的集合和定义在这个值集上的一组操作的总称；按值的不同特性，将数据类型分为：

1. 原子类型，整型，字符型等；
2. 结构类型，数组，结构体等；

抽象数据类型(abstract data type)是指一个数学模型（包括数据对象和数据关系）和定义在该模型上一组操作；

**抽象数据类型**由三元组表示：
$$
(D,S,P)
$$
D是数据对象，S是D上的关系集，P是对D的基本操作集；

ADT 抽象数据类型名{

​           数据对象：

​           数据关系：

​           基本操作：

} ADT 抽象数据类型名

基本操作伪码格式：

基本操作名（参数表）

​             初始条件：<初始条件描述>

​             操作结果：<操作结果描述>

**多形数据类型**，指其值的成分不确定的数据类型，但具有相同的数学抽象特性；

typedef 的四种用法：

1. 为基本数据定义新类型名； typedef int Boo;  可用Boo表示int；
2. 为自定义数据类型（结构体，共用体）定义简洁类型名称；
3. 为数组定义简洁名称， typedef  int  am_100[100];  am_100  am1;  am1 为位数100的指针；
4. 为指针定义简洁名称，typedef char* pchar ;  pchar a ; 定义a为char类型的指针；



算法效率的度量，一般采用事前分析的方法，主要取决以下因素：

1. 算法选取的策略；
2. 问题的规模；
3. 书写程序的语言，同一个算法，实现语言的级别越高，执行效率越低；
4. 编译程序产生的机器代码的质量；
5. 机器执行指令的速度；

算法复杂度分析，大O表示法，存在参数c>0 ，n0>0，对于所有的n>=n0, f(n)<=cg(n)，则
$$
f(n)=O(g(n))
$$
![image-20201114101046477](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201114101046477.png)

表示随着问题规模n 的增大，算法执行时间的增大率和g(n)的增长率相同，简称时间复杂度；

大O表示法的单位时间：简单的布尔或算术运算，O(1)；简单的I/O，从内存或数组直接读取元素，O(1);

大O表示法运算规则：

加法规则：（选最耗时的部分）
$$
f_1(n)+f_2(n)=O(max(f_1(n),f_2(n)))
$$
乘法规则：（循环嵌套就是相乘）例如外循环0到n-1，内循环 i 到 n-1，则时间复杂度：
$$
\sum_{i=0}^{n-1}(n-i)=\frac{n(n+1)}{2}=O(n^2)
$$
![image-20201114103848369](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201114103848369.png)



算法中基本操作重复执行的次数还随着问题的输入数据集的不同而不同，一般考虑平均情况，此时相应的时间复杂度为算法的平均时间复杂度；

![image-20201114105053723](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201114105053723.png)

例如用冒泡排序算法使数组从小到大排序：

~~~c
// 定义paixu.h的头文件，flag判断是否还在冒泡，若没有改变顺序则排序已经完成；
void BubbleSort1(int* arr, int sz) {
    int i = 0;
    int j = 0;
    bool flag;
    for (i = 0; i < sz - 1; i++) {
        flag = false;
        for (j = 0; j < sz - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
                flag = true;
            }
        }
        if (flag == false) {
            break;
    }
    }
}

#include<iostream>
#include"paixu.h";
using namespace std;
int main(void) {
	int a[10] = { 1,2,6,8,5,4,1,3,6,10 };
	BubbleSort1(a, 10);
	for (int i = 0; i < 10; i++) {
		cout << a[i] << endl;
	}
	return 0;
}
~~~

![image-20201114153451616](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201114153451616.png)

若初始序列直接是从小到大，则执行次数为0；若为从大到小，则执行次数：
$$
\sum_{i=0}^{n-1}(n-i-1)=n(n-1)/2
$$
由于输入数据集的不确定，该算法的平均时间复杂度就难以确定，此时就以最坏情况作为其时间复杂度，T(n)=O(n^2);

**算法的空间复杂度**，除了需要存储空间来寄存本身所需的指令，常数，变量和输入数据外，同时需要对数据进行操作的工作单元和为实现计算所需信息的**辅助空间**；

若辅助空间相对于输入数据量是常数，则称算法为原地工作；



### 补充内容：输入输出流；



## 二. 线性表

线性结构特点：在数据元素的非空有限集中，

1. 存在唯一被称作第一个的元素；
2. 存在唯一被称为最后一个的元素；
3. 除第一个外，集合中每个数据元素只有一个前驱；
4. 除最后一个外，每个元素只有一个后继；

线性表是n个数据元素的有序序列，其中一个数据元素可由若干数据项组成，此时把数据元素称为记录，含有大量记录的线性表为文件；

**线性表的顺序表示（顺序表）指用一组地址连续的存储单元依次存储线性表的数据元素；**

无需为表中逻辑关系确定额外存储空间，可以快速存取表中任一位置的元素；

线性表中顺序表基本算法：

1. 将表LB中有LA没有的插入LA

   循环获取LB中元素，每个元素再循环和LA比较，有相等返回1，无返回0，if(!结果)，插入到LA末端，先将数组长度加一，然后LA[末端]=e；

   数组长度变化的动态数组：

   ~~~c
   int *a=(int *)malloc(10*sizeof(int))
   a=(int*)realloc(a,20*sizeof(int))  //把a的大小增到20，并保持原来的数据不变
   ~~~

2. 将LA和LB的数值全部插入LC，并非递减有序排列（递增，相同的放一起）；

   先将LA和LB递增排序，然后

   ~~~c
   #include<iostream>
   using namespace std;
   int main() {
       int LA[5] = { 1,2,3,9,10 };
       int LB[5] = { 4,5,6,11,13 };
       int LA_len = sizeof(LA) / sizeof(LA[0]);
       int LB_len = sizeof(LB) / sizeof(LB[0]);
       int i = 0, j = 0;
       int* LC = new int[LA_len + LB_len];
       while (i < LA_len && j < LB_len)
           if (LA[i] <= LB[j])
           {
               LC[i + j] = LA[i];
               ++i;         // 运行完输出i=5
           }
           else
           {
               LC[i + j] = LB[j];
               ++j;
           }
       while (i <= LA_len - 1) 
       {
            LC[i + j] = LA[i];++i;
       }
       while (j <= LB_len - 1) 
       {
            LC[i + j] = LB[j];++j;   //第j项刚开始并没有赋值给LC，因此先赋值
       } 
       // 前面是LA和LB中较小值依次放入LC中，最后谁有剩余直接放在LC最后；
       for (int m = 0; m < (LA_len + LB_len); m++)
           cout << LC[m] << endl;
       return 0;
   }
   // 时间复杂度为O(LA.len+LB.len)，时间复杂度的值必须和数据规模相关，因此算时间复杂度，主要看算法思想中对数据的操作方式；
   ~~~

3. 在数组中插入或删除元素，首先获取要插入或删除的元素位置，该元素往后的值右移或左移1位，对应的时间复杂度O(n)；



为了解决线性表中插入删除需要移动大量元素，并且造成了存储空间碎片的问题，引入链式存储结构；

对于数据元素ai，除了存储本身信息（数据域），还需要存储一个指示其后继的信息（指针域），两部分信息组成数据的存储映像，即结点（code）；

结点只包含一个指针域，为单链表；链表中第一个结点存储位置为头指针，头指针是链表指向第一个结点的指针，若有头节点，则是指向头节点的指针；也可在第一个结点前设置一个头结点，其指针域存储头指针的位置，数据域可存放线性表的公共数据等；链表末尾结点的指针域为空指针（null）；

头指针具有标识作用，常用头指针冠以链表的名称，无论链表是否为空，头指针均不为空；

假设p为指向第i个元素内存空间的指针，p->data为第i个元素内存空间里数据域的值；p->next为第i个元素的指针域的值，即第i+1个元素的地址；

线性单链表中每个数据元素结构体：

~~~c
typedef struct Node
{
    elemtype data;
    struct Node *next;  //定义一个指向该类型数据的指针
};   //因为可以在定义完类后定义对象，因此必须加;表示结束
~~~

线性表中单链表的基本算法：

1. 获取链表中第i个元素的值，先声明一个指针指向第一个结点，然后不断指向下一个结点，j++，若指向空（表明到结尾），还未找到i，则报错；

   ~~~c
   status getelem(linklist L,int i,elemtype *e )
   {
       linklist p; //定义一个初始指针；
       p=L->next; // 头指针的值赋给初始指针；
       int j=1;
       while(p&&j<i)  //若p等于链表末尾的空指针，也结束循环
       {
           p=p->next;  // 每次循环将下一个结点的指针赋值给p
           ++j;
       }
   }
   ~~~

2. 单链表第i个结点插入新元素e，在p和p->next结点中插入e结点，e->next=p->next; p->next=e;

   ~~~c
   //首先遍历到第i-1个结点，其指针域指向第i个结点，指针为p
   s=(elemtype *)malloc(sizeof(node))  //定义一个空结点的指针
   s->data=e;
   s->next=p;
   p->next=s;  
   ~~~

3. 单链表把第i个结点删除，并用e返回其值；

   ~~~c
   //第i-1个结点地址为p
   q=p->next;
   p->next=q->next;
   *e=q->data;
   free(q); // 释放q指针所指向的内存，但q指针本身的值不变
   ~~~

4. 创建一个长度为n 的单链表

   ~~~c
   //头插法，始终让新结点在第一的位置
   void createlisthead(linklist *L,int n)
   {
       linklist *p;
       int i;
       L=(node*)malloc(sizeof(node));
       L->next=NULL;  //只有一个元素，其指针域部分为NULL
       for(i=0;i<n;i++)
       {
           p=(node*)malloc(sizeof(node));
           p->data=rand()%100+1;  //随机生成100以内数字
           p->next=L->next;
           L->next=p;
       }      
   }
   
   //尾插法，把新结点放在最后；
   void createlisttail(linklist *L,int n)
   {
       linklist *p,*r;
       int i;
       L=(node*)malloc(sizeof(node));
       r=L;  // 把第一个建立的元素当作末尾结点
       for(i=0;i<n;i++)
       {
           p=(node*)malloc(sizeof(node));
           p->data=rand()%100+1;  //随机生成100以内数字
           r->next=p;
           r=p;  //将r指针指向链表的结尾结点的内存空间
       } 
       r->next=NULL; // 末尾结点指针域置空；
   }
   ~~~

4. 单链表的整表删除

   clearlist(linklist *L)

   初始条件：顺序链表L已存在（指向第一个元素的指针为表名）

   操作结果：将L置为空表；

   ~~~c
   linklist *p=L->next;
   free(L);
   linklist *q;
   while(p)  //在最后一个结点时，仍然执行，执行完后p=NULL；
   {
       q=p->next;
       free(p);
       p=q;
   }
   ~~~


创建一个单链表并输出：

~~~c
#include<iostream>
using namespace std;
int main() {
    typedef struct Node
    {
        int data;
        struct Node* next;  //定义一个指向该类型数据的指针
    };   //因为可以在定义完类后定义对象，因此必须加;表示结束
    Node* r;
    Node* p;
    r = (Node*)malloc(sizeof(Node));
	r->data = 2;  //定义第一个元素的值
	Node* m=r;
    int i;
    for (i = 0; i < 5; i++)
    {
        p= (Node*)malloc(sizeof(Node));
        p->data = i;
        r->next = p;
        r = p;
    }
    r->next = NULL;
	while (!(m == NULL))
	{
		cout << m->data << endl;
		m = m->next;
	}
    return 0;
}
~~~

![image-20201117104447535](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201117104447535.png)



对于没有指针的语言，用数组来代替指针进行描述，如静态链表；

数组的第一个和最后一个元素作为特殊元素，不存数据，第一个元素存放备用链表第一个元素的下标（空闲空间的第一个），最后一个元素存放第一个存数据的元素的下标，起头结点的作用；数组中每一个普通元素都带数值和下表两部分；

~~~c
//定义一个每个元素两部分组成的数组；
#define maxsize 1000; //链表的最大长度为1000
typedef struct
{
    int data;
    int cur;  //定义游标
}linklist[maxsize];
//创建一个没有值的备用链表
status initlist(linklist space)
{
    int i;
    for(i=0;i<maxsize-1;i++)
    {
        space[i].cur=i+1;
    }
    space[i].cur=0;
    return 0;
}
~~~

静态链表的插入和删除操作：

~~~c
//在一个已经定义好的静态链表中插入
int j,k,l;
linklist L;
k=maxsize-1;
j=L[0].cur; //得到空闲分量的下标；
if(j)
{
    L[j].data=e; //在空闲位置插入元素的值e
    for(l=1;l<=i-1;l++)
        k=L[k].cur;    //获取前一个元素的位置
    L[j].cur=L[k].cur;
    L[k].cur=j;
}
L[0].cur=L[j].cur; //更新第一个特殊元素指向的位置，指向下一个空闲区；
}

//将下标为k的空闲结点释放到备用链表的第一个位置
void free_ssl(linklist space,int k)
{
    space[k].cur=space[0].cur;  //要释放的元素的游标指向原先备用链表第一项；
    space[0].cur=k;
}
~~~



循环链表，将单链表中终端结点的指针由空指针改为指向头节点；

原先由p->next是否为空判断循环结束，现在p->next是否为头节点位置；

双向链表，在单链表的每个结点中，再设置一个指向其前驱结点的指针域；

p->next->prior=p=p->prior->next;

~~~c
// 在结点p后插入元素s，p,s均为对应指针
s->prior=p;
s->next=p->next;
p->next=s;
p->next->prior=s;
~~~

~~~c++
// 链表反向
void list_reverse(listnode** a) // 因为要通过函数对指针修改，需调用二级指针
{
    int p;
    listcode* c=*a;
    listcode* d=(*a)->next;
    listnode* b=nullptr;
    c->next=nullptr;
    while(d!==nullptr)
    {
        b=d->next;
        d->next=c;
        c=d;
        d=b;
    }
}
~~~



## 三.栈和队列

栈(stack)是限定仅在表尾进行插入和删除操作的线性表；

在不是所有元素都进栈的情况下，事先进去的元素也可以出栈；

### 栈的顺序存储结构

用一个连续的数组存储元素，用top变量来指示栈顶元素在数组中位置，栈的结构定义如下：

~~~c
typedef struct
{
    elemtype data[maxsize];
    int top;  //栈顶位置
}sqstack;
~~~

栈的进栈(push)和出栈(pop)操作；

~~~c
//入栈
int push(sqstack *s,int e)
{
    if(s->top==19)
    {
        return error;
    }
    s->top++;
    s->data[s->top]=e;
    return ok;
}
int pop(sqstack *s,int *e)
{
    if(s->top==-1)  //栈中无元素为-1,有一个元素栈顶为0；
        return 0;
    *e=s->data[s->top];
    s->top--;
    return 1       
}
~~~

定义一个初始数组[1,2,3]，并用进栈操作插入4到栈顶，栈顶位置加1；

c++中函数应定义在主函数之外；

数组变量 a[5]={1，2，3}；则a为1 2 3 0 0；

自定义结构体初始化 struct sqstack s = { {1,2,3},2 };依次对结构体中变量赋值；

函数在调用过程中的参数为形参，fun(a)，将a的值赋给对应的形参后运行，最后a的值不发生改变，若想通过函数内对实际元素a改变：1. 函数定义时参数引用，int fun(int &a);   2. 定义指针，int fun(int *a)，在输入参数时，int a=5; int * m=&a;  fun(m); 则可通过函数对a改变；

因为指针指向内存的位置，函数相当于直接对指定内存的数进行了修改；

结构体变量可在定义中进行初始化，

struct sqstack
{
    int data[20] ={1,2,3};
    int top=2;  //栈顶位置
}m;

也能通过 struct sqstack s = { {1,2,3},2 }; 初始化；

若要定义一个结构体的指针，sqstack* a;不行，没有对指针进行初始化，所以先定义一个结构体对象，再sqstack* a=&m；

~~~c
#include<iostream>
using namespace std;
//链表的最大长度为1000
#define maxsize 20; // 定义后无法使用 ？？？？
typedef struct sqstack
{
    int data[20];
    int top;  //栈顶位置
}sqstack,*listsqstack;  //由typedef定义该类型结构体的指针，然后定义该结构体指针直接listsqstack a;等同于 sqstack* a;
int push(listsqstack s, int e)
{
    if (s->top == 19)
    {
        cout << "error" << endl;
        return 0;
    }
    s->top++;
    s->data[s->top] = e;
    return 1;
}
int main() {
    listsqstack s;
    sqstack m = { {1, 2, 3}, 2 };
    s = &m;
    int e = 4;
    push(s, e);
    /*if (s.top == 19)
        cout << "error" << endl;
    else
    {
        s.top++;
        s.data[s.top] = e;
    }*/
    for (int i = 0; i <= s->top; i++)
        cout << s->data[i] << endl;
}
~~~

![image-20201119162201302](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201119162201302.png)

#### 两栈共享空间

一个数组存储两个栈，两端分别为两个栈的栈底；

top1为-1时，栈1为空；top2为n时，栈2为空；（数组一个n个位置，0到n-1）

共享空间栈插入，弹出元素：

~~~c
//两栈共享空间结构
typedef struct doublestack
{
    elemtype data[maxsize];
    int top1;
    int top2;
};
// 插入元素e为栈顶元素
status push(doublestack *s,elemtype e,int stacknumber)
{
    if(s->top1+1==s->top2)
        return 0;         //说明数组中已经没有位置
    if(stacknumber==1)
        s->data[++s->top1]=e;
    if(stacknumber==2)
        s->data[--s->top2]=e;
    return 1;
}
// 弹出栈顶元素到*e地址
status pop(doublestack *s,elemtype *e,int stacknumber)
{
    if(stacknumber==1)
    {
        if(s->top1==-1)
            return 0;
        *e=s->data[s->top1--]; //先返回top1位置的元素，再将top1减1
    }
    else if(stacknumber==2)
    {
        if(s->top2==maxsize)
            return 0;
        *e=s->data[s->top2++];
    }
    return 1;
}
~~~

一般只针对具有相同数据类型的栈；



### 栈的链式存储结构

头指针是链表必须存在的元素，指向链表第一个元素的地址，常以头指针的名称作为链表的名称；

因为链表必须有头指针，栈需要栈顶指针，因此把头指针作为栈顶指针；

~~~c
// 链栈的结构代码
typedef struct stacknode // 定义链表结点结构体
{
    elemtype data;
    struct stacknode *next;  //定义自身结构体的指针
}stacknode,*linkstacknode;
typedef struct linkstack  // 定义链栈的结构体，包括数量和栈顶指针
{
    linkstacknode top;
    int count;
}linkstack;

// 插入元素e为新栈顶元素
status push(linkstack* s,elemtype e)
{
    linkstacknode p=(linkstacknode)malloc(sizeof(stacknode));
    p->data=e;
    p->next=s->top;
    s->top=p;
    s->count++;
    return 1;   
}
// 删除s的栈顶元素，保存到*e中
status pop(linkstack* s,elemtype* e)
{
    *e=s->top->data;
    linkstacknode p=s->top;  
    s->top=s->top->next;
    free(p);  // free和malloc对应的都是指针
    s->count--;
    return 1;     
}
~~~



### 栈的作用--递归

把一个直接调用自己或通过一系列的调用语句间接调用自己的函数，成为递归函数；

每个递归定义至少一个条件，满足时递归不再进行；

迭代使用循环结构，递归使用选择结构，大量的递归调用会建立大量的副本，消耗大量时间和内存；

栈的结构就很适合先将每一层递归逐个压入栈，满足递归条件后再逐层取出，计算最先压入栈的值；

~~~c
// 斐波那契递归函数，后一项为前两项相加
int fbi(int i)
{
    if(i<2)
        return i==0?0:1;
    return fbi(i-1)+fbi(i-2)
}
int main()
{
    int i;
    for(i=0;i<40;i++)
        printf("%d",fbi(i));
    return 0
}
~~~



### 队列

只允许在一端进行插入操作，另一端进行删除操作的线性表；

先进先出，允许插入一端为队尾，允许删除的一端队头；

队尾插入一个元素，时间复杂度为O(1)，对头删除一个元素，将所有元素向前移动一位，时间复杂度O(n)，为了减少删除时的时间复杂度，设置头位置front，标记队头元素，设置尾位置rear，标记队尾元素的下一个位置，删除元素时只改变头指针，不移动所有元素；

当front和rear的数值相同时，表明是空数组；

因为头下标和尾下标都可以移动，因此线性表可能出现‘假溢出’现象，头指针前面还有位置，尾指针已经放不下；为此把队列头尾相接，构成循环队列；

空队列时，front==rear，因此满队列时保留一个空元素，当front和rear相差为1时，可能是队满（也可能只有一个元素）；

当线性表的最大长度为maxsize时

**队列满的条件：**

rear-front=-1或maxsize-1   即rear+1-front=0或maxsize 

即 （rear+1-front）%maxsize==0;

**队列的元素长度公式：**

rear-front或maxsize-front+rear

即  (rear-front+maxsize)%maxsize

~~~c
//循环队列的结构体
typedef struct
{
    elemtype data[maxsize];
    int front;
    int rear;
}sqqueue;
//初始化一个空队列
status initqueue(sqqueue *Q)
{
    Q->front=0;
    Q->rear=0;
    return 1;
}
//循环队列插入操作
status insert(sqqueue *Q,elemtype e)
{
    if((Q->rear+1-Q->front)%maxsize==0)
        return 0;  //队列已满
    Q->data[Q->rear]=e;
    if(++Q->rear==maxsize)
        Q->rear==0;
    else
        Q->rear=Q->rear+1;
    return 1;
}
~~~

**队列的链式存储结构**

为了给指向队头的指针一个存储位置，设置一个头节点，存储front指针的值；rear指针指向最后一个结点位置，最后一个结点存储指针指向NULL；

当为空链队列时，front和rear指针指向头节点；即当队列只有一个元素时，front指向头节点，rear指向该元素，再删除这个元素，要设置rear指向头结点；

~~~c
//链队列的结构
typedef struct node
{
    elemtype data;
    struct node* next;
};
typedef struct linkqueue   //链队列只需要头指针和尾指针
{
    node* front,rear; 
};
// 入队操作
status enqueue(linkqueue* Q,elemtype e)
{
    node* s=(node*)malloc(sizeof(node)); //为链表加入元素首先要创建新结点
    if(!s)
        return 0;
    s->data=e;
    Q->rear->next=s;
    s->next=NULL;
    Q->rear=s;     //将尾指针指向最后一个元素
    return 1;
}
//出队操作
status outqueue(linkqueue* Q,elemtype* e)
{
    if(Q->front==Q->next)
        return 0;
    node* p=Q->front->next
    e=p->data;
    p=p->next;
    if(Q->rear=p)
        Q->rear=Q->front;// 考虑删除完元素后的情况
    return 1;
}
~~~



## 字符串

串（string）是由零个或多个字符组成的有序数列；

串中任意个连续字符组成的子序列称为该串的子串，子串在主串的位置即第一个字符在主串的序号；

串的比较是通过组成串的字符编码来进行；

ASCII编码由一个字节表示，8位二进制可以表示256种字符，这已经可以满足英语为主的语言和部分特殊符号输入；为了满足世界上其他语言，出现Unicode编码，将世界的所有字符都由特定编码表示，因此需要多个字节，utf-8就是Unicode的一种实现方式，一般以16位表示一个字符，其前256个字符和ASCII码完全相同。

c++提供了两种类型的字符串表示方式，1. 用c语言中char；2. 用c++引入的string类；

~~~c++
char zifu[6]={'H','e','l','l','o','\0'}; //用/0表示字符串结尾
char zifu[6]="hello";  //编译器在初始化数组时自动补/0做结尾，因此数组长度至少为6
// char关键字为自带，不需要带头文件，string需要include<string>
#include<string>
string str1="hello";
str3=str1+str2; //把str2连接在str1后面
int len=str1.size(); //由string类的函数求数组长度
    
~~~

朴素模式匹配算法：

~~~c
// 返回子串在主串第pos个字符之后的位置，若主串中不存在子串，返回0；
// 假设字符串长度均存储在第0个位置；
int index(string s,string t,int pos)
{
    int i=pos;
    int j=1;
    while(i<=s[0]&&j<=t[0])
    {
        if(s[i]==t[j])
        {
            ++i;
            ++j;
        }
        else
            i=i-j+2;
    }
    if(j==t[0]+1)
        return i-t[0];
    else
        return 0;
}
~~~

最坏情况，即每次都匹配到最后一个才发现不是，一直匹配到最后，时间复杂度为

(O((n-m+1)*m)，因此该算法比较低效；

**KMP模式匹配算法**提高了对于匹配字符串的效率，时间复杂度为O(m+n);

把要匹配的字符串各个位置的j值变化定义为一个数组next；

~~~c++
// 计算返回子串T的next数组
void get_next(string T,int* next)
{
    int i,j;
    i=1;
    j=0;
    next[1]=0;
    while(i<T[0])
    {
        if(j==0||T[i]==T[j])
        {
            ++i;
            ++j;
            next[i]=j;
        }
        else
            j=next[j];
    }
}
// 报错next超出索引，反正不对
~~~













## 树

树是n个结点的有限集，n=0时为空树；

当n>1时，其余结点可分为m个互不相交的有限集，每个集合本身又是一个树；

结点拥有的子树称为结点的度，度为0的结点称为叶节点，度不为0结点为分支结点或内部结点；树的度是树内各节点度的最大值；

树中结点的最大层次称为树的深度；

若将树中结点的各子树从左到右有次序，不能互换，则该树为有序树；

森林是m棵**互不相交**的树的集合；

~~~c
// 用双亲表示法定义树
#define max_size 100;
typedef int elemtype;
struct pnode
{
    elemtype data;
    int parent;    // 放该结点父节点的下标位置
};
struct shu
{
    pnode nodes[maxsize];
    int r,n;  //根结点的位置和总节点数
}
// 根结点的父指针域值设为-1；每个结点找父结点时间复杂度为0，但找子结点要整个遍历；
// 用孩子表示法定义树
// 若直接每个结点定于树的度个指针域，可能会浪费存储空间；若每个结点根据其度来定义指针域个数，导致结点结构不同，不方便定义；由顺序表和链表结合来定义。
struct childnode   // 定义链表结点
{
    int child;
    struct childnode* next;
};
struct pnode   // 定义数组中结点
{
    elemtype data;
    /*int parent;*/       // 将父节点和子节点寻找结合
    childnode* firstchild;
};
struct shu
{
    pnode nodes[maxsize];
    int r,n;
};
// 孩子兄弟表示法，设置两个指针，分别指向该结点第一个孩子和右兄弟
struct csnode
{
    elemtype data;
    csnode* firstchild,*rightchild;
};
//该方法可方便的遍历到某结点的所有孩子，同时将一个复杂的树变成了二叉树
~~~

**二叉树**

二叉树每个结点度最多为2，左子树和右子树有顺序，只有一个子树也要区分左右；

所有分支结点都存在左子树和右子树，并且所有叶子结点都在同一层，称为满二叉树；

对二叉树中的结点从根节点往下，从左往右依次编号，如果编号为i的结点和满二叉树中编号为i的结点位置完全相同，则为完全二叉树；

同样结点数的二叉树，完全二叉树的深度最小；

二叉树性质：

1. 二叉树的第i层至多有2^(i-1)个结点（i>=1);

2. 深度为k的二叉树至多2^k-1个结点；

3. 任意二叉树，终端节点数n0，度为2的节点数n2，则n0=n2+1；
   $$
   n=n_0+n_1+n_2 \quad 分支线总数=n-1=2\times n_2+n_1
   $$

4. 具有n个结点的完全二叉树深度为,[]表示不大于x的最大整数；
   $$
   [log_2{n}]+1
   $$

5. 如果i>1，则其双亲是结点[i/2]；若2i>n，则i结点无左孩子；若2i+1>n，则i结点无右孩子；

二叉树存储结构

将完全二叉树可按顺序存储结构存储，由其位置可直接反映出逻辑关系；

普通二叉树为了不浪费存储空间，采用链式存储，一个存放数据，两个指针分别指向两个子节点；

**二叉树的遍历**

1. 前序遍历，根左右；
2. 中序遍历，左根右；
3. 后序遍历，左右根；
4. 层序遍历，从上到下，从左到右依次访问；

~~~c
// 二叉树链表结点定义，若无子树，则对应指针为空指针
typedef struct bitnode
{
    elemtype data;
    struct bitnode* lchild,rchild;
}bitnode,*bitree;     // 定义该类型指针名称

// 二叉树前序遍历
void preordertraverse(bitree T)
{
    if(T==NULL)
        return;  // 结束正在运行的函数
    printf("%c",T->data);
    preordertraverse(T->lchild); // 先遍历左子树
    preordertraverse(T->rchild); // 后遍历右子树
}
// 二叉树中序遍历
void inordertraverse(bitree T)
{
    if(T==NULL)
        return;  // 结束正在运行的函数
    inordertraverse(T->lchild); // 先遍历左子树
    printf("%c",T->data);
    inordertraverse(T->rchild); // 后遍历右子树
}
// 二叉树后序遍历
void rearordertraverse(bitree T)
{
    if(T==NULL)
        return;  // 结束正在运行的函数
    rearordertraverse(T->lchild); // 先遍历左子树
    rearordertraverse(T->rchild); // 后遍历右子树
    printf("%c",T->data);
}
~~~

由任意两种遍历顺序可得到一颗确定的二叉树；但已知后序和前序遍历，无法确定；

前序遍历即由上到下，遇到哪个输出哪个，先左后右；

中序遍历是由最左开始，依次往上，遇到有右子树的也输出，右边也是从最左开始，遇到右子树也输出，同时往上；

后序遍历从最下面的最左边开始，逐层向上输出，根节点最后；

**二叉树的建立**

将二叉树的每个结点的空指针，引出一个虚结点，值为#；即为扩展二叉树；

比如将前序遍历ABDC变为 A#BD##C##

采用二级指针，因为要通过函数对一级指针的内容修改；

（若要通过函数B修改函数A中的某个变量a。需要获得变量a的地址，如果a是普通变量，需要获得一级指针。如果a是指针，需要获得二级指针。重点是看需要修改的变量是什么，再去获得它的指针。）

~~~c
void createBitree(Bicode **T)
{
    elemtype ch;
    scanf("%c",&ch);  // 输入元素给ch，后面加ch的地址
    if(ch=='#')
        *T=NULL;
    else
    {
        *T=(Bicode*)malloc(sizeof(Bicode));
        if(!*T)
            exit(OVERFLOW);  // 整个动态堆都没有空间了
        (*T)->data=ch;
        createBitree(&(*T)->lchild); //对左孩子指针取二级指针
        createBitree(&(*T)->rchild);
    }
}
~~~

利用递归的原理，将原来打印结点的地方生成结点，什么遍历就对应什么构造顺序；

**线索二叉树**

扩展二叉树建立过程中空指针很多，需要对这些指针空间利用；

对于n个结点的二叉树，指针域个数为2n，连接数为n-1，则空指针域个数n+1；

将空指针域存放前驱和后继，加上线索的二叉树链表为线索链表；

为区分指向结点还是指向前驱后继，设置两个标志域，ltag为0表示指向左孩子，ltag为1表示指向前驱；rtag为0表示指向右孩子，rtag为1表示指向前驱；

~~~c++
#include<iostream>
#include<string>
using namespace std;
enum PointerTag { Link, Thread };
typedef struct Bithrnode
{
    char data;
    struct Bithrnode* lchild, * rchild;
    PointerTag Ltag;
    PointerTag Rtag;
}Bithrnode, * Bithrtree;
int createBitree(Bithrtree* T) // 由前序遍历建立二叉树，需要二级指针
{
    char ch = getchar(); // getchar函数每次读取缓存流中一个字节
    if (ch == '#')
        *T = nullptr;
    else
    {
        *T = (Bithrtree)malloc(sizeof(Bithrnode));
        if (!*T)
            exit(OVERFLOW);  // 整个动态堆都没有空间了
        (*T)->data = ch;
        createBitree(&(*T)->lchild); //对左孩子指针取二级指针
        createBitree(&(*T)->rchild);
    }
    return 1;   // 设置返回表示函数结束
}
void inTraverse(Bithrtree T)  // 中序遍历二叉树输出
{
    if (T == nullptr)
        return;
    inTraverse(T->lchild);
    cout << T->data << endl;
    inTraverse(T->rchild);
}
// 中序线索化函数
void _InOrder_Th(Bithrtree root, Bithrtree& prev)
{
    if (root == NULL)
    {
        return;
    }
    else
    {
        _InOrder_Th(root->lchild, prev);
        if (root->lchild == NULL)
        {
            root->lchild = prev;
            root->Ltag = Thread;
        }
        if (prev && prev->rchild == NULL)
        {
            prev->rchild = root;
            prev->Rtag = Thread;
        }
        prev = root;
        _InOrder_Th(root->rchild, prev);
    }
}
// 中序遍历下第一个结点左指针指向头节点，最后一个结点的右指针指向头节点；
// 头结点左指针指向第一个结点，右指针指向最后一个结点；
void buchong(Bithrtree T, Bithrtree M)
{
    Bithrtree p, q;
    p = T;
    q = T;
    while (p->lchild!=nullptr)
        p = p->lchild;
    p->lchild = M;
    while (q->rchild != nullptr)
        q = q->rchild;
    q->rchild = M;
    M->lchild = T;
    M->rchild = q;
}
// 通过对空指针处线索化后，可以快速对其遍历，遍历函数如下：时间复杂度O(n)
void inorderTraverse(Bithrtree T)
{
    Bithrtree p;
    p = T->lchild;  //T是头结点，其左指针指向p才是根结点，右指针指向遍历的最后一个结点；
    while (p != T)  // 遍历的第一个结点左指针指向头节点，最后一个结点右指针也指向头结点
    {
        while (p->Ltag!=Thread)
            p = p->lchild;
        cout << p->data << endl;
        while (p->Rtag==Thread&&p->rchild != T)
        {
            p = p->rchild;
            cout << p->data << endl;
        }
        p = p->rchild;
    }
    return;
}
void main()
{
    Bithrtree T = (Bithrtree)malloc(sizeof(Bithrnode));
    Bithrtree* M = &T;
    createBitree(M);
    inTraverse(*M); // 从根节点指针T的二级指针中得到根结点
    Bithrtree pre = nullptr;
    _InOrder_Th(*M,pre);
    Bithrtree tou =(Bithrtree)malloc(sizeof(Bithrnode));
    buchong(*M, tou);
    inorderTraverse(tou);
    free(tou);
    //cout << (*M)->data << endl;
}
~~~

![image-20201209173711128](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201209173711128.png)

第一次由中序遍历，第二次中序线索化后由线索遍历；

**树转化为二叉树**

树的孩子兄弟存储法，将树变成二叉树，两个指针分别存储结点的第一个孩子和右兄弟；

1. 加线，兄弟结点间连线；
2. 去线，只保留结点和第一个孩子结点连线；
3. 层次调整，原先的右兄弟变成孩子；

**森林转化成二叉树**

1. 先将每棵树转化为二叉树；
2. 从第二棵树开始，每一个的根节点看作前一棵树根节点的右兄弟；



**赫夫曼树：带权路径长度最小的二叉树；**

1. 依照权值由小到大排成有序数列；
2. 取头两个最小权值的结点作为N1（可看作判断条件）的两个子节点；
3. 用N1替代两个结点，重新排序；
4. 依次替代到结尾，即完成荷夫曼树构造；

赫夫曼树可构成最基本的压缩编码方式：

对于一段文字，根据每个字符出现的频率，最小化其权值，构建赫夫曼树；

然后所经过的路径，左路径0，右路径1进行编码；

从根节点到叶子结点经过的路径分支组成的0和1序列便是对应字符的编码；



## 图

图由顶点的有穷非空集合和顶点之间的集合组成，表示为G（V,E),V是图中顶点集合，E是图G中边集合；

图中数据元素，称为顶点；

任意两个顶点之间可能都有关系，顶点间的逻辑关系用边表示；

若顶点之间的边没有方向，则称为无向边（edge），用无序偶对表示（vi，vj）；有方向则为有向边（arc），用有序偶对<vi,vj>表示；

无向图中，任意两个顶点都存在边，则称该图为无向完全图，n个点的边有n(n-1)/2条；

有向图中，任意两个顶点之间存在方向互为相反的两条弧，为有向完全图；

与图的边或弧相关的数叫权（weight）；带权的图称为网（network）；

假设有两个图，G=(V,{E})和G'=(V',{E'})，若V'属于V，E'属于E,则称G‘为G的子图；

**图的五种不同存储方式**

1. 邻接矩阵

   一个一维数组存储顶点信息，一个二维数组（邻接矩阵）存储边或弧信息；

   n个顶点，二维数组是一个n*n的方阵：
   $$
   arc[i][j]=
   \begin{cases}
   1 &若(vi,vj)属于E\\
   0 &反之
   \end{cases}
   $$
   对于无向图，主对角线一定全为0，且为对称矩阵；

   求第i个顶点的度就是邻接矩阵在第i行或列元素之和；

   对于有向图，弧尾作行标记，弧头作列标记， 比如从v0到v1有弧，arc [0] [1]=1，arc[1] [0]=0；顶点的入度为该列各数之和，顶点的出度为该行各数之和；

   ~~~c++
   // 邻接矩阵存储结构
   typedef char vertype;
   typedef int edgetype; // 定义顶点类型和边上权值类型
   #define maxsize 100    // 宏定义不加;
   #define infinity 65535 // 定义图的最大定点数和权值中无限值
   typedef struct
   {
       vertype vexs[maxize];
       edgetype arc[maxsize][maxsize];
       int numvers,numedges; // 图中当前点数和边数
   }mgraph;
   ~~~

   创建无向网图：

   ~~~c++
   #include<iostream>
   using namespace std;
   typedef char vertype;
   typedef int edgetype; // 定义顶点类型和边上权值类型
   #define maxsize 100
   #define infinity 65535 // 定义图的最大定点数和权值中无限值
   typedef struct
   {
       vertype vexs[maxsize];
       edgetype arc[maxsize][maxsize];
       int numvers, numedges; // 图中当前点数和边数
   }mgraph;
   void createMgraph(mgraph* g)
   {
       int i, j, k, w;
       printf("输入顶点数和边数：\n"); // \n代表输出完自动换行
       scanf_s("%d%d", &g->numvers, &g->numedges); // 因为%d不能接受换行符，所以可以直接打个换行也没事;
       getchar();  // 因为接下来的输入是字符，enter换行也是字符，如果没有该getchar函数，换行符会被下面的当作输入
       for (i = 0; i < g->numvers; i++)
       {
           printf("第%d个结点", i);
           scanf_s("%c", &g->vexs[i]);
           getchar();
       }
       for (i = 0; i < g->numvers; i++)
       {
           printf("顶点列表为:%c\n", g->vexs[i]);
       }
       for (i = 0; i < g->numvers; i++)
           for (j = 0; j < g->numvers; j++)
           {
               if (i = j)
                   g->arc[i][j] = 0;
               g->arc[i][j] = infinity;
           }
       for (k = 0; k < g->numedges; k++)
       {
           printf("输入边下标i，下标j和权值w：\n");
           scanf_s("%d,%d,%d", &i, &j, &w);  //可以随意换行，因为%d不接收
           g->arc[i][j] = w;
           g->arc[j][i] = g->arc[i][j];
       }
   }
   void main()
   {
       mgraph* g = (mgraph*)malloc(sizeof(mgraph));
       createMgraph(g);
       free(g);
   }
   
   ~~~

   ![image-20201211095640318](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201211095640318.png)

2. 邻接表

   把数组和链表相结合的方法称为邻接表；

   数组中依次存储结点，边表结点两部分组成，邻接点域存储顶点在数组中下标，指针域存储下一个结点指针；

   对于带权值的网图，可以在边表中增加一个权值的数据域；

   创建一个带权值无向图的邻接表：

   ~~~c++
   // 定义结点和图结构体
   typedef char vertextype;
   typedef int edgetype;
   #define maxsize 10
   typedef struct edgenode  // 定义边表结点
   {
       int adjvex;
       edgetype weight;
       struct edgenode* next;
   };
   typedef struct listnode  //定义数组结点
   {
       vertextype data;
       edgenode* firstedge;
   };
   typedef struct graphlist
   {
       listnode listnodes[maxsize]; //定义数组结点组成的数组,形成嵌套的结构体
       int numnodes, numedges;
   };
   // 创建邻接表
   void createGraphlist(graphlist* G)
   {
       int i, j, k, m;
       edgenode* e;
       printf("输入节点数和边数\n");
       scanf_s("%d,%d", &G->numnodes, &G->numedges);
       getchar();
       for (i = 0; i < G->numnodes; i++)
       {
           scanf_s("%c", &G->listnodes[i].data);
           G->listnodes[i].firstedge = nullptr;  // 将数组结点的指针域置为空指针
       }
       for (j = 0; j < G->numedges; j++)
       {
           printf("输入第%d条边的两个结点位置下标和权值\n", j);
           getchar();
           scanf_s("%d,%d,%d", &i, &k, &m);
           e = (edgenode*)malloc(sizeof(edgenode));
           e->adjvex = k;
           e->weight = m;
           e->next = G->listnodes[i].firstedge;
           G->listnodes[i].firstedge = e;  //头插法，插入i结点连接的k的边结点
   
           e = (edgenode*)malloc(sizeof(edgenode));
           e->adjvex = i;
           e->weight = m;
           e->next = G->listnodes[k].firstedge;
           G->listnodes[k].firstedge = e;  //头插法，插入k结点连接的i的边结点
       }
   }
   void main()
   {
       graphlist* G = (graphlist*)malloc(sizeof(graphlist));
       createGraphlist(G);
       free(G);
   }
   ~~~

   ![image-20201211204415964](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201211204415964.png)

3. 十字链表

   对于有向图，想快速得到出度和入度，定义数组结点两个指针域，一个指接入它的结点位置，一个指它接出的结点位置；

4. 5. 为了更方便访问边作的一些对边表结点的改进；

      

### **图的遍历**

**深度优先遍历**：从某顶点出发，对于访问过的结点作标记，然后根据边遍历，遇到访问过的就换边访问没访问的，若该结点每条边的结点都访问过，返回上一个结点找未访问的，直至全部遍历完；

~~~c++
// 对于邻接矩阵深度优先遍历，时间复杂度为O(n^2)
#define maxsize 4
bool visited[maxsize];  // maxsize为结点数目
void DFS(mgraph G,int i) 
{
    visited[i]=true;
    printf("%c",G.vexs[i]);
    for(int j=0;j<G.numvers;j++)
        if(G.arc[i][j]!=0&&visited[j]==false)
            GFS(G,j);
}
void DFStraverse(mgraph G)
{
    for(int i=0;i<G.numvers;i++)
        visited[i]=false;
    for(int j=0;j<G.numvers;j++) // 因为非联通的图需要多次深度遍历，联通的只需一次
        if(visited[j]==false)
            DFS(G,j)
}
//下图为由上面邻接矩阵创建代码创建后遍历结果
~~~

![image-20201214102121926](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201214102121926.png)

~~~c++
// 对于邻接表深度优先遍历，时间复杂度O(n+e)
#define maxsize 4
bool visited[maxsize];  // maxsize为结点数目
void DFS(graphlist G,int i)
{
    visited[i]=true;
    printf("%c",G.listnodes[i].data);
    edgenode* p=G.listnodes[i].firstedge;
    while(p)
    {
        if(visited[p->adjvex]==false)
            DFS(G,p->adjvex);
        p=p->next;
    }
}
void DFStraverse(graphlist G)
{
    int i;
    for(i=0;i<G.numnodes;i++)
        visited[i]==false;
    for(i=0;i<G.numnodes;i++)
        if(visited[i]==false)
            DFS(G,i);
}
~~~

![image-20201214150200530](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201214150200530.png)

**广度优先遍历**：

类似于树的层序遍历，从某结点开始，建立队列，入队该结点，出队该节点，入队该节点连接的所有结点，出队第一个连接结点并入队出队结点连接的所有结点，遇到重复的不入队，遍历完所有结点；

~~~c++
// 对于邻接矩阵的广度优先遍历
#include<queue>
#include<iostream>
using namespace std;
#define maxsize 9
bool visited[maxsize];
typedef char vertype;
typedef int edgetype; // 定义顶点类型和边上权值类型
typedef struct
{
    vertype vexs[maxsize];
    edgetype arc[maxsize][maxsize];
    int numvers, numedges; // 图中当前点数和边数
}mgraph;
void createMgraph(mgraph* g)
{
    int i, j, k, w;
    printf("输入顶点数和边数：\n"); // \n代表输出完自动换行
    scanf_s("%d%d", &g->numvers, &g->numedges); // 因为%d不能接受换行符，所以可以直接打个换行也没事;
    getchar();  // 因为接下来的输入是字符，enter换行也是字符，如果没有该getchar函数，换行符会被下面的当作输入
    for (i = 0; i < g->numvers; i++)
    {
        printf("第%d个结点", i);
        scanf_s("%c", &g->vexs[i]);
        getchar();
    }
    for (i = 0; i < g->numvers; i++)
    {
        printf("顶点列表为:%c\n", g->vexs[i]);
    }
    for (i = 0; i < g->numvers; i++)
        for (j = 0; j < g->numvers; j++)
        {
            if (i = j)
                g->arc[i][j] = 0;
            g->arc[i][j] = 0;
        }
    for (k = 0; k < g->numedges; k++)
    {
        printf("输入边下标i，下标j和权值w：\n");
        scanf_s("%d,%d,%d", &i, &j, &w);  //可以随意换行，因为%d不接收
        g->arc[i][j] = w;
        g->arc[j][i] = g->arc[i][j];
    }
}
void BFStraverse(mgraph G)
{
    int i, j;
    char m;
    queue<char> Q;   // queue结构，类似于stack结构，通过头文件引入
    for (i = 0; i < G.numvers; i++)
        visited[i] = false;
    for (i = 0; i < G.numvers; i++)
    {
        if (visited[i] == false)  // 对未联通的部分访问
        {
            visited[i] = true;
            printf("%c", G.vexs[i]);
            Q.push(G.vexs[i]);  // 将值导入队列
            while (!Q.empty())
            {
                m=Q.front(); // 输出队列首元素但不删除
                for(int k=0;k<G.numvers;k++)
                    if(G.vexs[k]==m)
                        i=k;
                Q.pop();  // 将头结点弹出
                for (j = 0; j < G.numvers; j++)
                {
                    if (G.arc[i][j] != 0 && !visited[j])
                    {
                        visited[j] = true;
                        printf("%c", G.vexs[j]);
                        Q.push(G.vexs[j]);
                    }
                }
            }
        }
    }
}
void main()
{
    mgraph* G = (mgraph*)malloc(sizeof(mgraph));
    createMgraph(G);
    BFStraverse(*G);
    free(G);
}
~~~

![image-20201215102130352](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201215102130352.png)

~~~c++
// 对邻接表的广度优先遍历
#include<queue>
void BFStraverse(graphlist G)
{
    int i,j;
    edgenode* p;  // 定义边表结点指针p
    queue<char> Q;
    for(i=0;i<G.numvers;i++)
        visited[i]=false;
    for(j=0;j<G.numvers;j++) // 设置该循环可遍历到未联通的结点
    {
        visited[j]=true;
        printf("%c",G.listnodes[j].data);
        Q.push(G.listnodes[j].data);
        while(!Q.empty())
        {
            char m=Q.front();
            int k=0;
            while(G.listnodes[k]!=m)
                k++;
            j=k;
            Q.pop();
            p=G.listnodes[j].firstedge;
            while(p)
            {
                if(!visited[p->adjvex]) 
              {
                Q.push(G.listnodes[p->adjvex].data);
                visited[p->adjvex]=true;
                printf("%c",G.listnodes[p->adjvex].data);
              }
                p=p->next;
            }
        }
    }
}
~~~



**最短路径**

迪杰斯特拉算法：基于已经求出的最短路径的基础上，求出更远顶点的最短路径；

~~~c++
#define maxsize 9
#define infinity 65535
typedef int path[maxsize]; // 存储最短路径的下标数组
typedef int weighttable[maxsize]; // 存储到各点最短路径权值
// typedef定义一个数组的数据类型
// P(V)为V点前驱结点下标，D[V]为V0到V结点最短路径长度和
void shortpath_Dijkstra(mgraph G,int v0,path *p,weighttable *d)
{
    int v,w,k,min;
    int final[maxsize]; // final[m]置1表示从v0到m的最短路径已找到
    for(v=0;v<G.numvexs;v++)
    {
        final[v]=0;
        (*d)[v]=G.arc[v0][v]; //先以邻接矩阵第一行初始化v0到各点的距离
        (*p)[v]=0;
    }
    final[v0]=1;
    for(v=1;v<G.numvexs;v++) // 每次求得一个v0到v最短距离
    {
        min=infinity;
        for(w=0;w<G.numvexs;v++)
        {
            if(!final[w]&&(*d)[w]<min)
            {
                k=w;
                min=(*d)[w];
            }
        }
        final[k]=1;
        for(w=0;w<G.numvexs;w++)
        {
            if(!final[w]&&(min+G.arc[k][w]<(*d)[w]))
            {
                (*d)[w]=min+G.arc[k][w];
                (*p)[w]=k;
            }
        }
    }
}
~~~

佛洛依德算法：



**拓扑排序**

表示工程的有向图中，顶点表示活动，弧表示活动间的优先级关系，称为AOV网；

拓扑序列构造时若网的全部结点被输出，则说明不存在回路，时AOV网；输出顶点数少了，则不是AOV网；

拓扑排序基本思路：

从AOV网中选择一个入度为0的顶点输出，然后删除此顶点和以该定点为尾的弧，重复至输出全部顶点或不存在入度为0的顶点为止；

~~~c++
// 拓扑排序因为要删除，所以用邻接表结构，并额外设置入度块
#include<iostream>
#include<stack>
using namespace std;
// 定义结点和图结构体
typedef char vertextype;
typedef int edgetype;
#define maxsize 10
typedef struct edgenode  // 定义边表结点
{
    int adjvex;
    edgetype weight;
    struct edgenode* next;
};
typedef struct listnode  //定义数组结点
{
    int in;
    vertextype data;
    edgenode* firstedge;
};
typedef struct graphlist
{
    listnode listnodes[maxsize]; //定义数组结点组成的数组,形成嵌套的结构体
    int numnodes, numedges;
};
// 创建邻接表
void createGraphlist(graphlist* G)
{
    int i, j, k, m;
    edgenode* e;
    printf("输入节点数和边数\n");
    scanf_s("%d,%d", &G->numnodes, &G->numedges);
    getchar();
    for (i = 0; i < G->numnodes; i++)
    {
        scanf_s("%d,%c", &G->listnodes[i].in,&G->listnodes[i].data);
        getchar();
        G->listnodes[i].firstedge = nullptr;  // 将数组结点的指针域置为空指针
    }
    for (j = 0; j < G->numedges; j++)
    {
        printf("输入第%d条边的两个结点位置下标和权值\n", j);
        //getchar();
        scanf_s("%d,%d,%d", &i, &k, &m);
        e = (edgenode*)malloc(sizeof(edgenode));
        e->adjvex = k;
        e->weight = m;
        e->next = G->listnodes[i].firstedge;
        G->listnodes[i].firstedge = e;  //头插法，插入i结点连接的k的边结点
    }
}
typedef int status;
status Topo_Sort(graphlist G)
{
    stack<int> zhan;  // 用于存放度为0的结点下标
    int i, j, k;
    int count = 0;
    for (i = 0; i < G.numnodes; i++)
        if (G.listnodes[i].in == 0)
            j = i;
    zhan.push(j);
    printf("%c", G.listnodes[j].data);
    count++;
    edgenode* p;
    while (!zhan.empty())
    {
        k = zhan.top();
        p = G.listnodes[k].firstedge;
        zhan.pop();
        while (p!= nullptr)
        {
            --G.listnodes[p->adjvex].in;
          
            if (G.listnodes[p->adjvex].in == 0)
            {
                zhan.push(p->adjvex);
                printf("%c", G.listnodes[p->adjvex].data);
                count++;
            }
            p = p->next;
            
        }
    }
    if (count < G.numnodes)
        return 0;
    else
        return 1;
}
void main()
{
    graphlist* G = (graphlist*)malloc(sizeof(graphlist));
    createGraphlist(G);
    int m = Topo_Sort(*G);
    printf("%d", m);
    free(G);
}
~~~

![image-20201218112347373](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201218112347373.png)



## 查找

查找就是根据给定的某个值，在查找表中确定一个关键字等于给定值的数据元素或记录；

若关键词可唯一的识别一个记录，则为主关键词；对于可以识别多个记录的关键词为次关键词

查找按操作方式分类：

1. 静态查找表，查看对应元素是否在表中以及各种属性；
2. 动态查找，在查找过程中同时插入或删除某个数据元素；

为了提高查找的效率，将面向查找操作的数据结构称为查找结构；

~~~c++
// 顺序表查找优化：若用for循环遍历，每次要看i值是否大于n了，多了一个比较的过程
int Sequential_search(int *a,int n,int key)
{
    if(a[0]==key)
        return 1;
    else
        a[0]=key;  //设置一个哨兵
    int i=n;
    while(a[i]!=key)
        i--;
    return i; // 返回0表示查找失败，返回其他数字对应的位置就是key的位置
}
~~~

~~~c++
// 对于从小到大的有序表的折半查找
int Binary_search(int *a,int n,int key)
{
    int low,mid,high;
    low=1; 
    high=n;
    while(low<=high)
    {
        mid=(low+high)/2;
        if(a[mid]==key)
            return mid;
        else if(key>a[mid])
            low=mid+1;
        else
            high=mid-1;
    }
    return 0;
}
~~~

~~~c++
// 利用斐波那契数列查找，前两项分别为0，1，接下来每项都是前面两项的和
#include<iostream>
using namespace std;
int Fibonacci_search(int* a, int n, int key)
{
    int F[10];
    F[0] = 0; F[1] = 1;
    for (int i = 2; i < 10; i++)
        F[i] = F[i - 1] + F[i - 2]; // 构建斐波那契数组
    int low, mid, high;
    int j = 1;
    while (n > F[j])
        j++;
    for (int i = n; i < F[j]; i++)
        a[i] = a[n-1];
    low = 0;
    high = n-1;
    while (low <= high)
    {
        mid = low + F[j - 1];
        if (key < a[mid])
        {
            high = mid - 1;
            j = j - 1;
        }
        else if (key > a[mid])
        {
            low = mid + 1;
            j = j - 2;
        }
        else
        {
            if (mid <= n)
                return mid+1;
            else
                return n;
        }
    }
    return 0;
}
void main()
{
    int a[15] = { 0,12,18,20,26,31,35,36,39,61 };
    cout<<Fibonacci_search(a, 10, 35);
}
// 输出为7，一般找不到数组第一个元素
~~~

~~~c++
// 插值查找，根据要查找关键字和low和high的数值距离判断mid结点位置,该方法性能比折半法好很多，但是多了对mid的较难计算
int Interpolate_search(int *a,int n,int key)
{
    int low,mid,high;
    low=1; 
    high=n;
    while(low<=high)
    {
        mid=low+(high-low)*(key-a[low])/(a[high]-a[low]); 
        if(a[mid]==key)
            return mid;
        else if(key>a[mid])
            low=mid+1;
        else
            high=mid-1;
    }
    return 0;
}
~~~

